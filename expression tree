#include<iostream>
#include <string>
#include<stack>
using namespace std;

// Node class representing a node in the expression tree
class Node
{
    char data;            // Character data (operand or operator)
    Node* left;           // Left child
    Node* right;          // Right child

    // Constructor initializes node with character data
    Node(char d) : data(d), left(NULL), right(NULL) {}

    // Make ExpressionTree a friend class so it can access private members
    friend class ExpressionTree;
};

// ExpressionTree class for handling tree creation and traversal
class ExpressionTree
{
    Node* root;  // Root of the expression tree

public:
    // Function to create expression tree from prefix expression
    void createTree(string prefix)
    {
        int j = prefix.length() - 1; // Start from the end of the string
        stack<Node*> st;

        while (j >= 0)
        {
            // If character is an operand (A-Z or a-z)
            if (prefix[j] >= 65 && prefix[j] <= 90 || prefix[j] >= 97 && prefix[j] <= 122)
            {
                Node* newNode = new Node(prefix[j]); // Create a node for operand
                st.push(newNode); // Push operand node to stack
            }
            // If character is an operator
            else
            {
                Node* parent = new Node(prefix[j]); // Create node for operator

                // Top of stack becomes left child (note: reversed due to prefix)
                parent->left = st.top();
                st.pop();

                // Next top of stack becomes right child
                parent->right = st.top();
                st.pop();

                // Push parent node back to stack
                st.push(parent);
            }
            j--; // Move to the previous character in prefix
        }

        root = st.top(); // Root of the tree is at top of stack
        st.pop();
    }

    // Getter function to access root of tree (used for recursive operations)
    Node* getRoot()
    {
        return root;
    }

    // Non-recursive postorder traversal of expression tree
    void postOrderNonRecursive()
    {
        stack<Node*> st;
        Node* root = this->root;

        while (root != NULL || !st.empty())
        {
            // Go to leftmost node while pushing right child first
            while (root != NULL)
            {
                if (root->right)
                    st.push(root->right);
                st.push(root);
                root = root->left;
            }

            root = st.top();
            st.pop();

            // If the right child is not yet visited
            if (root->right && !st.empty() && st.top() == root->right)
            {
                Node* temp = st.top();
                st.pop();
                st.push(root);
                root = temp; // Process right child
            }
            else
            {
                // Visit the node
                cout << root->data << " ";
                root = NULL; // Reset root to continue with top of stack
            }
        }
    }

    // Helper function to delete all nodes (used by destructor)
    void delAllNodes(Node* root)
    {
        if (root)
        {
            delAllNodes(root->left);
            delAllNodes(root->right);
            delete root; // Delete current node
        }
    }

    // Destructor to delete all dynamically created nodes
    ~ExpressionTree()
    {
        cout << "Deleting all Nodes\n";
        delAllNodes(root); // Free the memory
    }
};

int main()
{
    ExpressionTree exptree;
    string prefix;

    cout << "Enter a Prefix Expression : ";
    getline(cin, prefix); // Take prefix input (e.g., "*+AB-CD")

    exptree.createTree(prefix); // Create expression tree from prefix
    cout << "Postorder traversal (Non-recursive) : ";
    exptree.postOrderNonRecursive(); // Perform non-recursive postorder traversal
}
/*Q: What is an expression tree?
A: An expression tree is a binary tree where leaves are operands and internal nodes are operators, used to represent and evaluate expressions.

Q: Why do we construct the tree from the end of the prefix expression?
A: In prefix notation, operators come before operands. So, to construct the tree properly, we process the expression from right to left.

Q: Why is a stack used in tree construction?
A: Stack helps temporarily store operand nodes so that when an operator is encountered, we can pop two operands and assign them as children of the operator node.

Q: What is postorder traversal used for in expression trees?
A: Postorder traversal is used to evaluate the expression as it visits the left subtree, right subtree, and then the operator (root).

Q: How is memory managed in this program?
A: Dynamically created nodes are deleted using a recursive delAllNodes function called in the destructor.

Q: What is the output of the traversal for the input *+AB-CD?
A: The tree corresponds to the expression ((A + B) * (C - D)). Postorder traversal: A B + C D - *
*/
