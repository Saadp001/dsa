/*---------------------------------------------------
Pr no : 06
Title : Represent a given graph using adjacency matrix/list to perform DFS and using adjacency list to perform BFS. Use the map of the area around the college as the graph. Identify the prominent landmarks as nodes and perform DFS and BFS on that.
-----------------------------------------------------*/

#include<iostream>
using namespace std;

// Class for representing the graph using an adjacency matrix
class graph {
    int a[10][10];    // Adjacency matrix
    int vcnt;         // Number of vertices
    int Rcnt;         // Result counter for visited vertices
    int v[20];        // Stores visited vertices
public:
    graph() {
        Rcnt = 0;
        vcnt = 0;
    }

    void read_adjacency();       // Read adjacency matrix
    void display_adjacency();    // Display adjacency matrix
    void BFS();                  // Breadth-First Search
    void DFS();                  // Depth-First Search
    int search(int);             // Search if a vertex is already visited
};

// Reads the adjacency matrix from user input
void graph::read_adjacency() {
    cout << "Enter vertex count: ";
    cin >> vcnt;
    for (int i = 1; i <= vcnt; i++) {
        for (int j = 1; j <= vcnt; j++) {
            cout << "Enter edge " << i << " to " << j << ": ";
            cin >> a[i][j];   // 1 if edge exists, else 0
        }
    }
}

// Displays the adjacency matrix
void graph::display_adjacency() {
    cout << "Adjacency Matrix:\n";
    for (int i = 1; i <= vcnt; i++) {
        for (int j = 1; j <= vcnt; j++) {
            cout << a[i][j] << "  ";
        }
        cout << "\n";
    }
}

// Queue class for BFS implementation
class Queue {
    int a[20];
    int f, r;   // Front and rear pointers
public:
    Queue() {
        f = 0;
        r = 0;
    }

    void insert(int key);  // Enqueue
    int Delete();          // Dequeue
};

void Queue::insert(int key) {
    if (r != 20) {
        a[r++] = key;
    } else {
        cout << "Queue is full ";
    }
}

int Queue::Delete() {
    if (f != r) {
        return a[f++];
    } else {
        cout << "Queue is Empty ";
        return -1;  // Return dummy value if empty
    }
}

// Stack class for DFS implementation
class stack {
    int a[20];
    int top;
public:
    stack() {
        top = -1;
    }

    void push(int key);  // Push onto stack
    int pop();           // Pop from stack
};

void stack::push(int key) {
    if (top != 19) {
        a[++top] = key;
    } else {
        cout << "Stack is full ";
    }
}

int stack::pop() {
    if (top != -1) {
        return a[top--];
    } else {
        cout << "Stack is Empty ";
        return -1;  // Return dummy value if empty
    }
}

// Checks if a vertex has already been visited
int graph::search(int key) {
    for (int i = 0; i < Rcnt; i++) {
        if (v[i] == key) {
            return 1;  // Found
        }
    }
    return 0;  // Not found
}

// Breadth-First Search implementation
void graph::BFS() {
    Rcnt = 0;  // Reset visited
    int sv, curr;
    cout << "Enter starting vertex: ";
    cin >> sv;
    v[Rcnt++] = sv;  // Mark starting vertex as visited

    Queue q;
    q.insert(sv);    // Enqueue starting vertex

    for (int i = 1; i <= vcnt; i++) {
        curr = q.Delete();  // Dequeue current vertex

        // Explore all adjacent vertices
        for (int c = 1; c <= vcnt; c++) {
            if (a[curr][c] == 1 && search(c) == 0) {
                q.insert(c);       // Enqueue unvisited adjacent
                v[Rcnt++] = c;     // Mark as visited
            }
        }
    }

    // Print BFS traversal result
    cout << "BFS = ";
    for (int i = 0; i < Rcnt; i++) {
        cout << " " << v[i];
    }
    cout << endl;
}

// Depth-First Search implementation
void graph::DFS() {
    Rcnt = 0;  // Reset visited
    int sv, curr;
    cout << "Enter starting vertex: ";
    cin >> sv;
    v[Rcnt++] = sv;  // Mark starting vertex as visited

    stack s;
    s.push(sv);  // Push starting vertex onto stack

    for (int i = 1; i <= vcnt; i++) {
        curr = s.pop();  // Pop current vertex

        // Explore all adjacent vertices
        for (int c = 1; c <= vcnt; c++) {
            if (a[curr][c] == 1 && search(c) == 0) {
                s.push(c);        // Push unvisited adjacent
                v[Rcnt++] = c;    // Mark as visited
            }
        }
    }

    // Print DFS traversal result
    cout << "DFS = ";
    for (int i = 0; i < Rcnt; i++) {
        cout << " " << v[i];
    }
    cout << endl;
}

// Main function to run the program
int main() {
    int choice;
    graph obj;

    obj.read_adjacency();       // Step 1: Input graph
    obj.display_adjacency();    // Step 2: Show adjacency matrix

    // Menu-driven choice for BFS or DFS
    do {
        cout << "\nMenu\n1. BFS\n2. DFS\n3. Exit\nEnter choice: ";
        cin >> choice;
        switch (choice) {
            case 1:
                obj.BFS();
                break;
            case 2:
                obj.DFS();
                break;
        }
    } while (choice != 3);  // Exit condition

    return 0;
}

output:
gescoe@gescoe-OptiPlex-3010:~/Desktop/SE-A-45$ g++ graph.cpp
gescoe@gescoe-OptiPlex-3010:~/Desktop/SE-A-45$ ./a.out
---MENU---
1. Insert Matrix
2. Display Matrix
3. BFS
4. DFS
5. Exit
Enter your choice
1
Enter total no. of vertices:4
Edge from 1 to 1:1
Edge from 1 to 2:2
Edge from 1 to 3:3
Edge from 1 to 4:4
Edge from 2 to 1:5
Edge from 2 to 2:6
Edge from 2 to 3:7
Edge from 2 to 4:8
Edge from 3 to 1:9
Edge from 3 to 2:10
Edge from 3 to 3:11
Edge from 3 to 4:12
Edge from 4 to 1:13
Edge from 4 to 2:14
Edge from 4 to 3:15
Edge from 4 to 4:16
---MENU---
1. Insert Matrix
2. Display Matrix
3. BFS
4. DFS
5. Exit
Enter your choice
2
1. 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
---MENU---
1. Insert Matrix
2. Display Matrix
3. BFS
4. DFS
5. Exit
Enter your choice
3
Enter start vertex:1
BFS:1
---MENU---
1. Insert Matrix
2. Display Matrix
3. BFS
4. DFS
5. Exit
Enter your choice
2
1. 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
---MENU---
1. Insert Matrix
2. Display Matrix
3. BFS
4. DFS
5. Exit
Enter your choice
4
Enter start vertex:2
Stack is empty.
Stack is empty.
Stack is empty.
DFS:1 2
---MENU---
1. Insert Matrix
2. Display Matrix
3. BFS
4. DFS
5. Exit
Enter your choice
2
1. 2 3 4
5 6 7 8
9 10 11 12
13 14 15 16
---MENU---
1. Insert Matrix
2. Display Matrix
3. BFS
4. DFS
5. Exit
Enter your choice
5
End of the programgescoe@gescoe-OptiPlex-3010:~/Desktop/SE-A-5$

/*What is BFS?: Level-wise traversal using a queue.

What is DFS?: Depth-wise traversal using a stack (or recursion).

Why use search()?: To avoid visiting the same node again.

Why adjacency matrix?: Easy to check if an edge exists between any two vertices.

Limitations: Fixed size arrays, no edge weights, not efficient for sparse graphs.*/

