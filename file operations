#include<iostream>         // For standard I/O
#include<fstream>          // For file handling (ifstream, ofstream, fstream)
#include<cstring>          // For string operations like strcpy
using namespace std;

// Structure to store student information
struct Student {
    int roll;
    char name[20];
    char div;
    char address[50];
} rec;

// Class containing functions to manage student records
class StudentManager {
public:
    void create();
    void display();
    int search(int);       // Modified to take roll number as parameter
    void remove();         // Renamed Delete to remove to avoid conflict with keyword
};

void StudentManager::create() {
    char ans;
    ofstream fout("stud.dat", ios::out | ios::binary);  // Create (or overwrite) the file

    do {
        cout << "\nEnter Roll No of Student: ";
        cin >> rec.roll;
        cout << "Enter Name of Student: ";
        cin >> rec.name;
        cout << "Enter Division: ";
        cin >> rec.div;
        cout << "Enter Address: ";
        cin >> rec.address;

        fout.write((char*)&rec, sizeof(Student));       // Write binary data to file

        cout << "Do you want to add more records? (y/n): ";
        cin >> ans;
    } while (ans == 'y' || ans == 'Y');

    fout.close();     // Close the file
}

void StudentManager::display() {
    ifstream fin("stud.dat", ios::in | ios::binary);    // Open file in read mode

    cout << "\n--- Student Records ---";
    cout << "\nRoll\tName\tDiv\tAddress\n";

    while (fin.read((char*)&rec, sizeof(Student))) {
        if (rec.roll != -1) {   // Skip logically deleted records
            cout << rec.roll << "\t" << rec.name << "\t" << rec.div << "\t" << rec.address << endl;
        }
    }

    fin.close();
}

int StudentManager::search(int roll_no) {
    ifstream fin("stud.dat", ios::in | ios::binary);
    int pos = 0;

    while (fin.read((char*)&rec, sizeof(Student))) {
        if (rec.roll == roll_no) {
            cout << "\nRecord Found:";
            cout << "\nRoll\tName\tDiv\tAddress\n";
            cout << rec.roll << "\t" << rec.name << "\t" << rec.div << "\t" << rec.address << endl;
            fin.close();
            return pos;   // Return the position in the file
        }
        pos++;
    }

    fin.close();
    cout << "\nRecord not found.";
    return -1;     // Return -1 if not found
}

void StudentManager::remove() {
    int roll_no;
    cout << "Enter the Roll No to delete: ";
    cin >> roll_no;

    int pos = search(roll_no);
    if (pos == -1) {
        cout << "Cannot delete. Record does not exist.\n";
        return;
    }

    fstream f("stud.dat", ios::in | ios::out | ios::binary);
    int offset = pos * sizeof(Student);
    f.seekp(offset);   // Move to the position of the record to be deleted

    rec.roll = -1;
    strcpy(rec.name, "NULL");
    rec.div = 'N';
    strcpy(rec.address, "NULL");

    f.write((char*)&rec, sizeof(Student));    // Overwrite the record
    f.close();

    cout << "Record deleted successfully.\n";
}

int main() {
    StudentManager manager;
    int choice, roll;
    char again;

    do {
        cout << "\n----- Student Information System -----";
        cout << "\n1. Create Records";
        cout << "\n2. Display Records";
        cout << "\n3. Delete Record";
        cout << "\n4. Search Record";
        cout << "\n5. Exit";
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1: manager.create(); break;
        case 2: manager.display(); break;
        case 3: manager.remove(); break;
        case 4:
            cout << "Enter Roll No to Search: ";
            cin >> roll;
            manager.search(roll);
            break;
        case 5: return 0;
        default: cout << "Invalid choice. Try again.\n";
        }

        cout << "Do you want to continue? (y/n): ";
        cin >> again;

    } while (again == 'y' || again == 'Y');

    return 0;
}

