// Assignment no 5
#include <iostream>
using namespace std;

// Node class for Threaded Binary Tree
class node {
public:
    int data;       // Data value
    node* left;     // Pointer to left child or predecessor
    node* right;    // Pointer to right child or successor
    int lbit, rbit; // Flags to check if left/right pointers are real child(1) or thread(0)
};

// TBT class that manages the threaded binary tree
class TBT {
    node* root;      // Pointer to root node
public:
    node* head;      // Dummy head node for traversal boundary
    TBT() {
        root = NULL;
    }
    node* getroot() {
        return root;
    }
    void createtree();          // Function to insert nodes into TBT
    void inorder(node* root);  // In-order traversal using threads
};

// Function to create the TBT
void TBT::createtree() {
    char ans;
    node* new1, *curr;
    head = new node;             // Create dummy head node
    head->data = -999;           // Dummy value
    head->right = head;          // Right of head points to itself (loop)
    do {
        new1 = new node;         // New node creation
        new1->lbit = 0;          // Initially no children
        new1->rbit = 0;
        cout << "\nEnter your data: ";
        cin >> new1->data;

        if (root == NULL) {
            // First node becomes root
            root = new1;
            head->left = root;
            head->lbit = 1;      // Left of head now valid
            root->left = head;   // Thread to head
            root->right = head;  // Thread to head
        } else {
            curr = root;
            int flag = 0;
            if (new1->data < curr->data) {
                // Insert in left subtree
                while (flag == 0) {
                    if (curr->lbit == 0) {
                        // Insert here
                        new1->left = curr->left;
                        curr->left = new1;
                        curr->lbit = 1;
                        new1->right = curr;
                        flag = 1;
                    } else {
                        curr = curr->left;
                    }
                }
            } else if (new1->data > curr->data) {
                // Insert in right subtree
                while (flag == 0) {
                    if (curr->rbit == 0) {
                        // Insert here
                        new1->right = curr->right;
                        curr->right = new1;
                        curr->rbit = 1;
                        new1->left = curr;
                        flag = 1;
                    } else {
                        curr = curr->right;
                    }
                }
            } else {
                // Duplicate not allowed
                cout << "\nData already exists!";
            }
        }
        cout << "\nDo you want to add more node?(y/n): ";
        cin >> ans;
    } while (ans == 'Y' || ans == 'y');
}

// Inorder traversal using threading
void TBT::inorder(node* root) {
    node* temp;
    temp = root;
    int flag = 0;

    if (root == NULL) {
        cout << "\nTree is empty";
    } else {
        while (temp != head) {
            if (temp->lbit == 1 && flag == 0) {
                // Go to left child
                temp = temp->left;
            } else {
                // Visit node
                cout << " " << temp->data;
                if (temp->rbit == 1) {
                    temp = temp->right;
                    flag = 0;
                } else {
                    temp = temp->right;
                    flag = 1;
                }
            }
        }
    }
}

// Main function to test the program
int main() {
    TBT t;
    int ch;
    do {
        cout << "\n-------MENU-------";
        cout << "\n1. Insert";
        cout << "\n2. Display";
        cout << "\n3. Exit";
        cout << "\nEnter your choice: ";
        cin >> ch;
        switch (ch) {
            case 1:
                t.createtree(); // Insert nodes
                break;

            case 2:
                t.inorder(t.getroot()); // Inorder display
                break;

            case 3:
                exit(0); // Exit program
                break;

            default:
                cout << "\nInvalid Choice Entered!";
        }
    } while (ch != 3);
    return 0;
}
/*
Question	Answer
What is a Threaded Binary Tree?	A binary tree where NULL pointers are replaced by threads pointing to inorder predecessor or successor.
Why use threads?	To avoid recursion or stack during traversal, thus saving memory.
What is lbit and rbit?	Flags: 1 = child exists, 0 = thread. Used to differentiate between child pointers and thread links.
Why is a head node used?	It simplifies the traversal and boundary conditions, especially in circular threads.
What will happen if you insert a duplicate value?	Itâ€™s rejected; the code checks and does not allow duplicates.
Time complexity of insertion and traversal?	O(log n) average for balanced tree, O(n) worst case. Traversal is O(n).*/
