/*---------------------------------------------------------
Assignment : 07
Title : You have a business with several offices; you want to lease phone lines to connect them up with each other;
and the phone company charges different amounts of money to connect different pairs of cities.
You want a set of lines that connects all your office with a minimum total cost. 
Solve the problem by suggesting appropriate data structures.
(Minimum Spanning Tree using Prim’s Algorithm)
-----------------------------------------------------------*/

#include<iostream>
using namespace std;

// Structure to represent an edge between two vertices and its weight
class snode {
public:
    char u1, u2; // u1 and u2 are vertices (nodes/offices)
    int wt;      // weight of edge (cost of connecting offices)
};

// Main class containing all functions and arrays
class test {
    int n, m, x;
    snode arr[10]; // input array of edges
    snode res[10]; // resulting MST edges

public:
    test() {
        n = 0;  // number of edges
        m = 1;  // count of MST edges (starts from 1)
    }

    void inputsparse();   // function to take input edges
    void displaysparse(); // function to display input edges
    void bsort();         // function to sort edges by weight
    void prims();         // function to generate MST using Prim’s logic
    void dispmst();       // function to display MST result
};

// Display the MST result stored in res[]
void test::dispmst() {
    for (int i = 0; i < m; i++) {
        cout << res[i].u1 << " " << res[i].u2 << " " << res[i].wt << endl;
    }
}

// Function to build MST using simplified Prim’s algorithm
void test::prims() {
    int cnt = 0;  // counter to track added MST edges
    int flag1, flag2, i;

    res[0] = arr[0]; // add first (minimum weight) edge to MST
    m = 1;           // m tracks how many edges added to MST
    cnt = 1;

    do {
        for (i = 1; i < n; i++) {
            flag1 = 0;
            flag2 = 0;

            // Check whether u1 and u2 of arr[i] are already in MST
            for (int j = 0; j < m; j++) {
                if ((arr[i].u1 == res[j].u1 || arr[i].u1 == res[j].u2) && flag1 == 0)
                    flag1++;
                if ((arr[i].u2 == res[j].u1 || arr[i].u2 == res[j].u2) && flag2 == 0)
                    flag2++;
            }

            // XOR logic: Only one vertex of the edge should be in MST
            if (flag1 != 1 ^ flag2 != 1) {
                res[m++] = arr[i]; // add edge to MST
            }
        }
        cnt = x - 1; // MST should have (vertices - 1) edges
    } while (m != cnt); // Loop until required number of edges are added
}

// Function to take graph input from user
void test::inputsparse() {
    cout << "ENTER NO OF EDGES: ";
    cin >> n;
    cout << "ENTER NO OF VERTICES: ";
    cin >> x;

    for (int i = 0; i < n; i++) {
        cout << "ENTER 1ST VERTEX: ";
        cin >> arr[i].u1;
        cout << "ENTER 2ND VERTEX: ";
        cin >> arr[i].u2;
        cout << "ENTER WEIGHT: ";
        cin >> arr[i].wt;
        cout << endl;
    }

    bsort(); // sort edges before applying Prim's
}

// Function to display all input edges (after sorting)
void test::displaysparse() {
    for (int i = 0; i < n; i++) {
        cout << arr[i].u1 << " " << arr[i].u2 << " " << arr[i].wt << endl;
    }
}

// Function to sort edges by weight using bubble sort
void test::bsort() {
    snode temp;
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - 1 - i; j++) {
            if (arr[j].wt > arr[j + 1].wt) {
                temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}

// Main function
int main() {
    test obj;                 // Create object of test class
    obj.inputsparse();        // Take user input
    obj.displaysparse();      // Show sorted edges
    obj.prims();              // Generate MST using Prim's
    cout << "RESULT:" << endl;
    obj.dispmst();            // Display the MST result
    return 0;
}
/*A spanning tree that connects all vertices with the least total edge weight and no cycles.
Which algorithm are you using and why?
I’m using Prim’s Algorithm because it grows the MST one edge at a time and works well with dense graphs.
By checking that the edge connects exactly one new vertex (using XOR condition flag1!=1 ^ flag2!=1).
For simplicity in sorting the edges by weight. In real-world scenarios, we would use a more efficient sorting algorithm like std::sort.
: Why use XOR in Prim’s?
A: It ensures that only one node of the edge is already in MST. This avoids cycles and keeps the tree growing.

Q: Why is sorting done before Prim’s?
A: It helps us pick the minimum weight edge quickly at each step (this is actually closer to Kruskal's behavior, but simplified here).

Q: How many edges are in an MST for V vertices?
A: Always V - 1 edges.
Kruskal’s adds minimum weight edges globally; Prim’s grows a tree from one vertex using the lowest-cost edge connecting it.
*/


