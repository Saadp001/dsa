import java.util.Scanner;

public class ShellSort {

    // Method to sort the array using Shell Sort technique
    public static void shellsort(int arr[]) {
        int n = arr.length;

        // Start with a big gap and keep reducing it
        for (int gap = n / 2; gap > 0; gap /= 2) {

            // Go through the elements starting from the gap
            for (int i = gap; i < n; i++) {
                int temp = arr[i];
                int j = i;

                // Shift elements that are gap distance apart
                while (j >= gap && arr[j - gap] > temp) {
                    arr[j] = arr[j - gap];
                    j -= gap;
                }

                // Place the current element in its correct position
                arr[j] = temp;
            }
        }
    }

    // Function to display array elements
    public static void printArray(int arr[]) {
        for (int value : arr) {
            System.out.print(value + " ");
        }
        System.out.println();
    }

    // Main function - takes input, sorts array, shows output
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Ask user how many elements to sort
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        // Take input for the array
        System.out.print("Enter the elements: ");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Show array before sorting
        System.out.print("Before sorting: ");
        printArray(arr);

        // Perform shell sort
        shellsort(arr);

        // Show array after sorting
        System.out.print("After sorting: ");
        printArray(arr);
    }
}
/* javac 
   java
"Shell Sort is like an improved version of insertion sort."

"Instead of checking one element at a time, it checks elements with a gap."

"The gap keeps reducing, usually by half, until it becomes 1."

"This makes the array 'partially sorted' faster, then a final pass fixes the rest."

"It's done in-place, so it doesn't use extra space."

"Time complexity varies based on gap sequence; worst case can be O(nÂ²), but usually better."
*/
