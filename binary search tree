#include<iostream>
using namespace std;

// Node class to represent each node in BST
class node {
public:
    int data;
    node *left;
    node *right;
    node(int val) : data(val), left(NULL), right(NULL) {}  // Constructor to initialize node
};

// BST class encapsulating operations on the Binary Search Tree
class BST {
public:
    node *root;

    BST() {
        root = NULL;
    }

    void insert(int data);                    // Insert node
    void inorder(node *temp);                 // Inorder traversal
    void smallest();                          // Find smallest value
    void largest();                           // Find largest value
    bool search(int key);                     // Search a node
    void Mirror(node *r);                     // Create mirror image
    int height(node *r);                      // Find height of tree
    void insertMultipleValues();              // Method to insert multiple values using one insert function
};

// Calculate height of the tree (longest path from root)
int BST::height(node *r) {
    if (r == NULL)
        return 0;

    int Left_Height = height(r->left);
    int Right_Height = height(r->right);

    return max(Left_Height, Right_Height) + 1;
}

// Mirror the tree (swap left and right at every node)
void BST::Mirror(node *r) {
    if (r != NULL) {
        swap(r->left, r->right);
        Mirror(r->left);
        Mirror(r->right);
    }
}

// Search a value in the BST
bool BST::search(int key) {
    node *temp = root;
    while (temp != NULL) {
        if (key < temp->data)
            temp = temp->left;
        else if (key > temp->data)
            temp = temp->right;
        else
            return true;  // Found
    }
    return false;  // Not found
}

// Find smallest element (left-most node)
void BST::smallest() {
    if (root == NULL) {
        cout << "\nThe tree is empty.";
        return;
    }

    node *temp = root;
    while (temp->left != NULL)
        temp = temp->left;
    cout << "\nSmallest node in the tree is: " << temp->data;
}

// Find largest element (right-most node)
void BST::largest() {
    if (root == NULL) {
        cout << "\nThe tree is empty.";
        return;
    }

    node *temp = root;
    while (temp->right != NULL)
        temp = temp->right;
    cout << "\nLargest node in the tree is: " << temp->data;
}

// Insert a new node into BST
void BST::insert(int data) {
    node *new_node = new node(data);

    if (root == NULL) {
        root = new_node;
        return;
    }

    node *temp = root;
    while (true) {
        if (new_node->data < temp->data) {
            if (temp->left == NULL) {
                temp->left = new_node;
                break;
            } else {
                temp = temp->left;
            }
        } else if (new_node->data > temp->data) {
            if (temp->right == NULL) {
                temp->right = new_node;
                break;
            } else {
                temp = temp->right;
            }
        } else {
            cout << "\nData already exists in the tree.";
            break;
        }
    }
}

// Inorder traversal (Left, Root, Right)
void BST::inorder(node *temp) {
    if (temp != NULL) {
        inorder(temp->left);
        cout << " " << temp->data;
        inorder(temp->right);
    }
}

// Insert multiple values at once (single insert function)
void BST::insertMultipleValues() {
    int numValues;
    cout << "\nHow many values would you like to insert? ";
    cin >> numValues;

    while (numValues--) {
        int value;
        cout << "Enter value: ";
        cin >> value;
        insert(value);  // Using the single insert function
    }
}

// Main function with menu to demonstrate all BST operations
int main() {
    int ch, value;
    BST B;

    do {
        cout << "\n\n--- Menu ---";
        cout << "\n1. Insert multiple values";
        cout << "\n2. Inorder Traversal";
        cout << "\n3. Find Smallest Number";
        cout << "\n4. Find Largest Number";
        cout << "\n5. Search Value";
        cout << "\n6. Mirror the Tree";
        cout << "\n7. Find Height of Tree";
        cout << "\n8. Exit";
        cout << "\nEnter your choice: ";
        cin >> ch;

        switch (ch) {
            case 1:
                B.insertMultipleValues();
                break;
            case 2:
                cout << "\nInorder Traversal: ";
                B.inorder(B.root);
                break;
            case 3:
                B.smallest();
                break;
            case 4:
                B.largest();
                break;
            case 5:
                cout << "Enter value to search: ";
                cin >> value;
                if (B.search(value))
                    cout << "Value found in tree.";
                else
                    cout << "Value not found.";
                break;
            case 6:
                B.Mirror(B.root);
                cout << "Tree mirrored successfully.";
                break;
            case 7:
                cout << "Height of the tree: " << B.height(B.root);
                break;
            case 8:
                cout << "Exiting program.";
                break;
            default:
                cout << "Invalid choice. Try again.";
        }
    } while (ch != 8);

    return 0;
}
/*Q: What is a mirror of a tree?
A: A mirror swaps left and right pointers of all nodes in the tree recursively.

Q: Can a BST be perfectly balanced?
A: Only if the number of nodes is such that all levels are completely filled except possibly the last.

Q: What is a skewed BST?
A: A tree where all nodes form a straight line (either left or right). Worst-case time complexity is O(n).

Q: How do you prevent a skewed BST?
A: Use self-balancing trees like AVL or Red-Black Trees.

Q: What are real-world applications of BST?
A: Symbol tables, map/set implementations, database indexing, and router tables.

*/
