import java.util.Scanner;

class MergeSort {

    // Function to merge two halves of the array
    void merge(int arr[], int left, int mid, int right) {
        // Sizes of the two subarrays
        int n1 = mid - left + 1;
        int n2 = right - mid;

        // Temporary arrays to hold the left and right halves
        int[] L = new int[n1];
        int[] R = new int[n2];

        // Copy data into temporary arrays
        for (int i = 0; i < n1; i++)
            L[i] = arr[left + i];
        for (int j = 0; j < n2; j++)
            R[j] = arr[mid + 1 + j];

        // Indexes for left (L), right (R), and merged array
        int i = 0, j = 0, k = left;

        // Merge the two arrays by comparing elements
        while (i < n1 && j < n2) {
            if (L[i] <= R[j]) {
                arr[k] = L[i];
                i++;
            } else {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        // Copy any remaining elements from L[]
        while (i < n1) {
            arr[k] = L[i];
            i++;
            k++;
        }

        // Copy any remaining elements from R[]
        while (j < n2) {
            arr[k] = R[j];
            j++;
            k++;
        }
    }

    // Function to recursively divide and sort the array
    void mergeSort(int arr[], int left, int right) {
        if (left < right) {
            // Find the middle point
            int mid = (left + right) / 2;

            // Sort the first and second halves
            mergeSort(arr, left, mid);
            mergeSort(arr, mid + 1, right);

            // Merge the sorted halves
            merge(arr, left, mid, right);
        }
    }

    // Function to print the array
    static void printArray(int arr[]) {
        for (int value : arr)
            System.out.print(value + " ");
        System.out.println();
    }

    // Main method
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Take input for array size
        System.out.print("Enter number of elements: ");
        int n = sc.nextInt();

        int[] arr = new int[n];

        // Input array elements
        System.out.println("Enter the elements:");
        for (int i = 0; i < n; i++) {
            arr[i] = sc.nextInt();
        }

        // Show array before sorting
        System.out.println("Before sorting:");
        printArray(arr);

        // Call merge sort
        MergeSort obj = new MergeSort();
        obj.mergeSort(arr, 0, n - 1);

        // Show sorted array
        System.out.println("After sorting:");
        printArray(arr);
    }
}
/*
What is Merge Sort?
Merge Sort is a Divide and Conquer algorithm that splits the array into halves, sorts them, and then merges the sorted parts.

Time Complexity:

Best, Average, Worst: O(n log n)

It divides n elements log(n) times and merges them in linear time.

Why use Merge Sort?

It's stable and has guaranteed time complexity.

Good for linked lists and large datasets.

Space Complexity:
O(n) because of temporary arrays used in merging.
*/
